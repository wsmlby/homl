// under vllmama
// python3 -m grpc_tools.protoc -I protos --python_out=cli/homl_cli --grpc_python_out=cli/homl_cli daemon.proto
//  then modify vllmama/cli/homl_cli/daemon_pb2_grpc.py  "import daemon_pb2 as daemon__pb2" => "from . import daemon_pb2 as daemon__pb2"
// python3 -m grpc_tools.protoc -I protos --python_out=server/homl_server --grpc_python_out=server/homl_server daemon.proto
syntax = "proto3";

package homl;

// The daemon service definition.
service Daemon {
  // Starts a model.
  rpc StartModel (StartModelRequest) returns (StartModelResponse) {}

  // Stops a model.
  rpc StopModel (StopModelRequest) returns (StopModelResponse) {}

  // Lists running models.
  rpc ListRunningModels (ListRunningModelsRequest) returns (ListRunningModelsResponse) {}

  // Pulls a model from a registry.
  rpc PullModel (PullModelRequest) returns (stream PullModelProgress) {}

  // Lists locally available models.
  rpc ListLocalModels (ListLocalModelsRequest) returns (ListLocalModelsResponse) {}

  rpc Version (VersionRequest) returns (VersionResponse) {}

  rpc ConfigModel(ModelSettingsRequest) returns (ModelConfigResponse) {}
  rpc ConfigModelParam(ModelParamRequest) returns (ModelConfigResponse) {}
  rpc GetModelConfig(ModelInfoRequest) returns (ModelConfigResponse) {}
}



// --- Messages ---
message ModelSettings {
  map<string, string> settings = 1;
}
message ModelParam {
  repeated string params = 1;
}
message ModelConfigResponse {
  ModelSettings settings = 1;
  ModelParam params = 2;
}
message ModelSettingsRequest {
  string model_name = 1;
  ModelSettings settings = 2;
}
message ModelParamRequest {
  string model_name = 1;
  ModelParam params = 2;
}

message ModelInfoRequest {
  string model_name = 1;
}

message VersionRequest {
}
message VersionResponse {
  string version = 1;
}

message PullModelRequest {
  string model_name = 1;
  string hf_token = 2;
  bool refresh_config = 3;
}

message PullModelResponse {
  bool success = 1;
  string message = 2;
}

message PullModelProgress {
  string message = 1;
  int32 percent = 2;
  bool done = 3;
  bool success = 4;
}

message StartModelRequest {
  string model_name = 1;
  bool eager_mode = 2;
  ModelParam params = 3;
  bool use_params = 4;
}

message StartModelResponse {
  string message = 1;
  uint32 pid = 2;
}

message StopModelRequest {
  string model_name = 1;
}

message StopModelResponse {
  string message = 1;
}

message ListRunningModelsRequest {
  // No parameters needed for now.
}

message VRAMInfo {
  int32 device_id = 1;
  int32 vram_mb = 2;
}

message RunningModel {
    string model_name = 1;
    uint32 pid = 2;
    string status = 3;
    int32 ram_mb = 4;
    repeated VRAMInfo vram_usage = 5;

}

message ListRunningModelsResponse {
    repeated RunningModel models = 1;
    int32 total_ram_mb = 2;
    repeated VRAMInfo vram_total = 3;
}

message ListLocalModelsRequest {
  // No parameters needed for now.
  bool with_size = 1;
}
message LocalModelInfo {
  string model = 1;
  string model_id = 2;
  int32 size_mb = 3;
}
message ListLocalModelsResponse {
  repeated LocalModelInfo models = 1;
}
